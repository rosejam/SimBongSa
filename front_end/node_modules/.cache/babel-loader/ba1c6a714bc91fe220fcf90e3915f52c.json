{"ast":null,"code":"/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp) {\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   */\n  digits: function digits() {\n    return _process.call(this, regex.digits);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   */\n  letters: function letters() {\n    return _process.call(this, regex.letters);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   */\n  uppercase: function uppercase() {\n    return this.password !== this.password.toLowerCase() === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   */\n  lowercase: function lowercase() {\n    return this.password !== this.password.toUpperCase() === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   */\n  symbols: function symbols() {\n    return _process.call(this, regex.symbols);\n  },\n\n  /**\n   * Method to validate the presence of space\n   */\n  spaces: function spaces() {\n    return _process.call(this, regex.spaces);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  }\n};","map":{"version":3,"sources":["C:/Users/multicampus/Desktop/pjt/sub1/webmobile2/front_react/node_modules/password-validator/src/lib.js"],"names":["regex","require","_process","regexp","RegExp","test","password","positive","module","exports","not","symbol","call","has","is","min","num","length","max","digits","letters","uppercase","toLowerCase","lowercase","toUpperCase","symbols","spaces","oneOf","list","indexOf"],"mappings":"AAAA;;;;;;;AAOA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,KAAnC;;AAEA,SAASE,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,SAAO,IAAIC,MAAJ,CAAWD,MAAX,EAAmBE,IAAnB,CAAwB,KAAKC,QAA7B,MAA2C,KAAKC,QAAvD;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAEf;;;;;AAKAC,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,MAAb,EAAqB;AACxB,SAAKJ,QAAL,GAAgB,KAAhB;;AACA,QAAII,MAAJ,EAAY;AACV,aAAOT,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBD,MAApB,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GAbc;;AAef;;;;;AAKAE,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaF,MAAb,EAAqB;AACxB,SAAKJ,QAAL,GAAgB,IAAhB;;AACA,QAAII,MAAJ,EAAY;AACV,aAAOT,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBD,MAApB,CAAP;AACD;;AACD,WAAO,IAAP;AACD,GA1Bc;;AA4Bf;;;;;AAKAG,EAAAA,EAAE,EAAE,SAASA,EAAT,GAAc;AAChB,SAAKP,QAAL,GAAgB,IAAhB;AACA,WAAO,IAAP;AACD,GApCc;;AAsCf;;;;;AAKAQ,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaC,GAAb,EAAkB;AACrB,WAAO,KAAKV,QAAL,CAAcW,MAAd,IAAwBD,GAA/B;AACD,GA7Cc;;AA+Cf;;;;;AAKAE,EAAAA,GAAG,EAAE,SAASA,GAAT,CAAaF,GAAb,EAAkB;AACrB,WAAO,KAAKV,QAAL,CAAcW,MAAd,IAAwBD,GAA/B;AACD,GAtDc;;AAwDf;;;AAGAG,EAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,WAAOjB,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBZ,KAAK,CAACmB,MAA1B,CAAP;AACD,GA7Dc;;AA+Df;;;AAGAC,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,WAAOlB,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBZ,KAAK,CAACoB,OAA1B,CAAP;AACD,GApEc;;AAsEf;;;AAGAC,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,WAAQ,KAAKf,QAAL,KAAkB,KAAKA,QAAL,CAAcgB,WAAd,EAAnB,KAAoD,KAAKf,QAAhE;AACD,GA3Ec;;AA6Ef;;;AAGAgB,EAAAA,SAAS,EAAE,SAASA,SAAT,GAAqB;AAC9B,WAAQ,KAAKjB,QAAL,KAAkB,KAAKA,QAAL,CAAckB,WAAd,EAAnB,KAAoD,KAAKjB,QAAhE;AACD,GAlFc;;AAoFf;;;AAGAkB,EAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AAC1B,WAAOvB,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBZ,KAAK,CAACyB,OAA1B,CAAP;AACD,GAzFc;;AA2Ff;;;AAGAC,EAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,WAAOxB,QAAQ,CAACU,IAAT,CAAc,IAAd,EAAoBZ,KAAK,CAAC0B,MAA1B,CAAP;AACD,GAhGc;;AAkGf;;;;;AAKAC,EAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,WAAOA,IAAI,CAACC,OAAL,CAAa,KAAKvB,QAAlB,KAA+B,CAA/B,KAAqC,KAAKC,QAAjD;AACD;AAzGc,CAAjB","sourcesContent":["/**\n * Generic method to test regex\n *\n * @private\n * @param {string} regex - regex to test\n *                           with password\n */\nvar regex = require('./constants').regex;\n\nfunction _process(regexp) {\n  return new RegExp(regexp).test(this.password) === this.positive;\n}\n\nmodule.exports = {\n\n  /**\n   * Method to invert the next validations\n   *\n   * @param {RegExp} [symbol] - custom Regex which should not be present\n   */\n  not: function not(symbol) {\n    this.positive = false;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not()\n   *\n   * @param {RegExp} [symbol] - custom Regex which should be present\n   */\n  has: function has(symbol) {\n    this.positive = true;\n    if (symbol) {\n      return _process.call(this, symbol);\n    }\n    return true;\n  },\n\n  /**\n   * Method to invert the effects of not() and\n   * to make the api readable and chainable\n   *\n   */\n  is: function is() {\n    this.positive = true;\n    return true;\n  },\n\n  /**\n   * Method to specify a minimum length\n   *\n   * @param {number} num - minimum length\n   */\n  min: function min(num) {\n    return this.password.length >= num;\n  },\n\n  /**\n   * Method to specify a maximum length\n   *\n   * @param {number} num - maximum length\n   */\n  max: function max(num) {\n    return this.password.length <= num;\n  },\n\n  /**\n   * Method to validate the presence of digits\n   */\n  digits: function digits() {\n    return _process.call(this, regex.digits);\n  },\n\n  /**\n   * Method to validate the presence of letters\n   */\n  letters: function letters() {\n    return _process.call(this, regex.letters);\n  },\n\n  /**\n   * Method to validate the presence of uppercase letters\n   */\n  uppercase: function uppercase() {\n    return (this.password !== this.password.toLowerCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of lowercase letters\n   */\n  lowercase: function lowercase() {\n    return (this.password !== this.password.toUpperCase()) === this.positive;\n  },\n\n  /**\n   * Method to validate the presence of symbols\n   */\n  symbols: function symbols() {\n    return _process.call(this, regex.symbols);\n  },\n\n  /**\n   * Method to validate the presence of space\n   */\n  spaces: function spaces() {\n    return _process.call(this, regex.spaces);\n  },\n\n  /**\n   * Method to provide pre-defined values for password\n   *\n   * @param {array} list - list of values allowed\n   */\n  oneOf: function oneOf(list) {\n    return list.indexOf(this.password) >= 0 === this.positive;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}